import{_ as a,c as i,o as t,ae as n}from"./chunks/framework.B2RX65tY.js";const g=JSON.parse('{"title":"🔧 变量与函数","description":"","frontmatter":{},"headers":[],"relativePath":"guide/advanced/variables-and-functions.md","filePath":"guide/advanced/variables-and-functions.md","lastUpdated":1756968520000}'),e={name:"guide/advanced/variables-and-functions.md"};function l(h,s,p,d,r,k){return t(),i("div",null,[...s[0]||(s[0]=[n(`<h1 id="🔧-变量与函数" tabindex="-1">🔧 变量与函数 <a class="header-anchor" href="#🔧-变量与函数" aria-label="Permalink to &quot;🔧 变量与函数&quot;">​</a></h1><p>本文档详细介绍 Ryze 测试框架中变量定义和内置函数的使用方法。</p><h2 id="🔗-变量定义" tabindex="-1">🔗 变量定义 <a class="header-anchor" href="#🔗-变量定义" aria-label="Permalink to &quot;🔗 变量定义&quot;">​</a></h2><h3 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h3><p>在测试集合、测试用例、取样器中，可通过 <code>variables</code> 字段定义变量：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 简单变量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  var1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">value1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 对象变量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  var2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    key1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    key2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 数组变量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  var3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span></code></pre></div><h3 id="变量引用" tabindex="-1">变量引用 <a class="header-anchor" href="#变量引用" aria-label="Permalink to &quot;变量引用&quot;">​</a></h3><p><strong>引用语法</strong>：<code>\${变量名}</code></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">testuser</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">192.168.1.100</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${username}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 引用简单变量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${config.port}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 引用对象变量的属性</span></span></code></pre></div><h3 id="作用域说明" tabindex="-1">作用域说明 <a class="header-anchor" href="#作用域说明" aria-label="Permalink to &quot;作用域说明&quot;">​</a></h3><p>变量具有继承特性，子级可以访问父级变量：</p><ul><li><strong>项目级变量</strong>：在整个测试项目中有效</li><li><strong>模块级变量</strong>：在当前模块及其子模块中有效</li><li><strong>用例级变量</strong>：仅在当前测试用例中有效</li></ul><h2 id="⚡-函数使用" tabindex="-1">⚡ 函数使用 <a class="header-anchor" href="#⚡-函数使用" aria-label="Permalink to &quot;⚡ 函数使用&quot;">​</a></h2><h3 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h3><p>当需要动态生成数据时，可以使用函数在测试执行过程中实时计算值。</p><h3 id="调用语法" tabindex="-1">调用语法 <a class="header-anchor" href="#调用语法" aria-label="Permalink to &quot;调用语法&quot;">​</a></h3><p><strong>基本语法</strong>：<code>\${函数名(参数1, 参数2, ...)}</code></p><p><strong>命名参数</strong>：<code>\${函数名(参数名=值, 参数名=值)}</code></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 使用函数生成随机字符串</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  random_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${random_string(10)}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 使用命名参数</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  timestamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${timestamp(&#39;yyyy-MM-dd HH:mm:ss&#39;)}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${random_id}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    created_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${timestamp}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 直接在配置中使用函数</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${random_string(32, &#39;0123456789ABCDEF&#39;)}</span></span></code></pre></div><h3 id="使用建议" tabindex="-1">使用建议 <a class="header-anchor" href="#使用建议" aria-label="Permalink to &quot;使用建议&quot;">​</a></h3><ul><li>函数参数使用单引号包围字符串值（Freemarker 模板引擎要求）</li><li>复杂参数建议使用命名参数形式，提高可读性</li><li>函数执行顺序：先执行函数生成变量值，再进行变量替换</li></ul><h2 id="📚-内置函数列表" tabindex="-1">📚 内置函数列表 <a class="header-anchor" href="#📚-内置函数列表" aria-label="Permalink to &quot;📚 内置函数列表&quot;">​</a></h2><p>Ryze 提供了丰富的内置函数来满足常见的测试数据生成需求：</p><h3 id="🔐-安全加密函数" tabindex="-1">🔐 安全加密函数 <a class="header-anchor" href="#🔐-安全加密函数" aria-label="Permalink to &quot;🔐 安全加密函数&quot;">​</a></h3><h4 id="digest" tabindex="-1">digest <a class="header-anchor" href="#digest" aria-label="Permalink to &quot;digest&quot;">​</a></h4><p>生成信息摘要，支持多种散列算法。</p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>algorithm</code></td><td>String</td><td>md5</td><td>算法类型（md5、sha1、sha256 等）</td></tr><tr><td><code>content</code></td><td>String</td><td>无</td><td>待加密的原始内容（必填）</td></tr><tr><td><code>salt</code></td><td>String</td><td>无</td><td>盐值，用于增强安全性</td></tr><tr><td><code>upper</code></td><td>Boolean</td><td>false</td><td>是否转为大写</td></tr></tbody></table><p><strong>使用示例</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 简单 MD5 加密（如果只传一个参数，算法默认为md5）</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  simple_md5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${digest(&#39;hello world&#39;)}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 指定算法的加密</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  sha1_hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${digest(&#39;md5&#39;, &#39;password&#39;)}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 带盐值的 SHA256 加密</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  secure_hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${digest(&#39;sha256&#39;, &#39;password&#39;, &#39;mysalt&#39;, true)}</span></span></code></pre></div><h4 id="google2fa" tabindex="-1">google2fa <a class="header-anchor" href="#google2fa" aria-label="Permalink to &quot;google2fa&quot;">​</a></h4><p>生成谷歌身份验证器的动态验证码。</p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>secret</code></td><td>String</td><td>谷歌验证器安全码（必填）</td></tr></tbody></table><p><strong>使用示例</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  auth_code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${google2fa(&#39;JBSWY3DPEHPK3PXP&#39;)}</span></span></code></pre></div><h3 id="📊-数据生成函数" tabindex="-1">📊 数据生成函数 <a class="header-anchor" href="#📊-数据生成函数" aria-label="Permalink to &quot;📊 数据生成函数&quot;">​</a></h3><h4 id="random" tabindex="-1">random <a class="header-anchor" href="#random" aria-label="Permalink to &quot;random&quot;">​</a></h4><p>生成随机数。</p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>bound</code></td><td>Integer</td><td>无限制</td><td>随机数的上限（不包含）</td></tr></tbody></table><p><strong>使用示例</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 0-99 的随机数</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  random_num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${random(100)}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 任意随机数（可能为负数）</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  any_random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${random()}</span></span></code></pre></div><h4 id="random-string" tabindex="-1">random_string <a class="header-anchor" href="#random-string" aria-label="Permalink to &quot;random_string&quot;">​</a></h4><p>生成随机字符串。</p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>length</code></td><td>Integer</td><td>10</td><td>随机字符串长度</td></tr><tr><td><code>string</code></td><td>String</td><td>字母</td><td>生成随机字符串的字符集</td></tr><tr><td><code>upper</code></td><td>Boolean</td><td>false</td><td>是否转为大写</td></tr></tbody></table><p><strong>使用示例</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 默认随机字符串（长度10的字母字符串）</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  simple_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${random_string()}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 自定义长度</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  length_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${random_string(5)}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 自定义长度和字符集</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  custom_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${random_string(8, &#39;0123456789ABCDEF&#39;)}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 大写随机字符串</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  upper_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${random_string(6, &#39;&#39;, true)}</span></span></code></pre></div><h4 id="uuid" tabindex="-1">uuid <a class="header-anchor" href="#uuid" aria-label="Permalink to &quot;uuid&quot;">​</a></h4><p>生成标准的UUID（通用唯一标识符）。</p><p><strong>参数</strong>：无参数</p><p><strong>使用示例</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 生成UUID</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  unique_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${uuid()}</span></span></code></pre></div><h4 id="faker" tabindex="-1">faker <a class="header-anchor" href="#faker" aria-label="Permalink to &quot;faker&quot;">​</a></h4><p>基于Faker库生成各种类型的模拟数据。</p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>key</code></td><td>String</td><td>无</td><td>数据类型，格式为&quot;ClassName.Method&quot;（必填）</td></tr><tr><td><code>locale</code></td><td>String</td><td>zh-CN</td><td>语言区域设置</td></tr></tbody></table><p><strong>使用示例</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 生成中文姓名</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  chinese_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${faker(&#39;name.fullName&#39;)}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 生成英文城市名</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  english_city</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${faker(&#39;address.city&#39;, &#39;en-US&#39;)}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 生成手机号码</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  phone_number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${faker(&#39;phoneNumber.cellPhone&#39;)}</span></span></code></pre></div><h4 id="uuid-1" tabindex="-1">uuid <a class="header-anchor" href="#uuid-1" aria-label="Permalink to &quot;uuid&quot;">​</a></h4><p>生成标准 UUID。</p><p><strong>参数</strong>：无</p><p><strong>使用示例</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  unique_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${uuid()}</span></span></code></pre></div><h3 id="🕰️-时间日期函数" tabindex="-1">🕰️ 时间日期函数 <a class="header-anchor" href="#🕰️-时间日期函数" aria-label="Permalink to &quot;🕰️ 时间日期函数&quot;">​</a></h3><h4 id="timestamp" tabindex="-1">timestamp <a class="header-anchor" href="#timestamp" aria-label="Permalink to &quot;timestamp&quot;">​</a></h4><p>获取当前时间或格式化时间。</p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>format</code></td><td>String</td><td>无（返回时间戳）</td><td>日期格式化字符串</td></tr></tbody></table><p><strong>使用示例</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 时间戳</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  current_timestamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${timestamp()}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 格式化日期</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  current_date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${timestamp(&#39;yyyy-MM-dd&#39;)}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 完整日期时间</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  full_datetime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${timestamp(&#39;yyyy-MM-dd HH:mm:ss&#39;)}</span></span></code></pre></div><h4 id="time-shift" tabindex="-1">time_shift <a class="header-anchor" href="#time-shift" aria-label="Permalink to &quot;time_shift&quot;">​</a></h4><p>对时间进行偏移操作。</p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>format</code></td><td>String</td><td>无（返回时间戳）</td><td>日期格式化字符串</td></tr><tr><td><code>amount</code></td><td>String</td><td>无（不偏移）</td><td>时间偏移量</td></tr></tbody></table><p><strong>偏移量格式说明</strong>：</p><ul><li><code>PT20.345S</code>：20.345秒</li><li><code>PT15M</code>：15分钟</li><li><code>PT10H</code>：10小时</li><li><code>P2D</code>：2天</li><li><code>P2DT3H4M</code>：2天3小时4分钟</li><li><code>P-6H3M</code>：-6小时+3分钟</li><li><code>-P6H3M</code>：-6小时-3分钟</li></ul><p><strong>使用示例</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 当前时间</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${time_shift()}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 明天的日期</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  tomorrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${time_shift(&#39;yyyy-MM-dd&#39;, &#39;P1D&#39;)}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 一小时前</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  hour_ago</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${time_shift(&#39;yyyy-MM-dd HH:mm:ss&#39;, &#39;-PT1H&#39;)}</span></span></code></pre></div><h3 id="🔗-数据处理函数" tabindex="-1">🔗 数据处理函数 <a class="header-anchor" href="#🔗-数据处理函数" aria-label="Permalink to &quot;🔗 数据处理函数&quot;">​</a></h3><h4 id="json" tabindex="-1">json <a class="header-anchor" href="#json" aria-label="Permalink to &quot;json&quot;">​</a></h4><p>将传入的参数转换为 JSON 对象。</p><p><strong>参数</strong>：多个 &quot;key=value&quot; 格式的键值对</p><p><strong>使用示例</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  user_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${json(&#39;name=张三&#39;, &#39;age=25&#39;, &#39;email=zhangsan@example.com&#39;)}</span></span></code></pre></div><h4 id="json-read" tabindex="-1">json_read <a class="header-anchor" href="#json-read" aria-label="Permalink to &quot;json_read&quot;">​</a></h4><p>通过 JSONPath 读取 JSON 数据。</p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>json</code></td><td>Object</td><td>JSON 对象（必填）</td></tr><tr><td><code>path</code></td><td>String</td><td>JSONPath 表达式（必填）</td></tr></tbody></table><p><strong>使用示例</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  user_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${json_read(response_data, &#39;$.user.name&#39;)}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  user_age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${json_read(user_data, &#39;$.age&#39;)}</span></span></code></pre></div><h4 id="url-encode" tabindex="-1">url_encode <a class="header-anchor" href="#url-encode" aria-label="Permalink to &quot;url_encode&quot;">​</a></h4><p>对字符串进行 URL 编码。</p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>content</code></td><td>String</td><td>待编码的字符串（必填）</td></tr></tbody></table><p><strong>使用示例</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  encoded_param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${url_encode(&#39;测试参数 with space&#39;)}</span></span></code></pre></div><h4 id="url-decode" tabindex="-1">url_decode <a class="header-anchor" href="#url-decode" aria-label="Permalink to &quot;url_decode&quot;">​</a></h4><p>对字符串进行 URL 解码。</p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>content</code></td><td>String</td><td>待解码的字符串（必填）</td></tr></tbody></table><p><strong>使用示例</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  decoded_param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${url_decode(&#39;%E6%B5%8B%E8%AF%95%E5%8F%82%E6%95%B0&#39;)}</span></span></code></pre></div><h3 id="🎭-模拟数据函数" tabindex="-1">🎭 模拟数据函数 <a class="header-anchor" href="#🎭-模拟数据函数" aria-label="Permalink to &quot;🎭 模拟数据函数&quot;">​</a></h3><h4 id="faker-1" tabindex="-1">faker <a class="header-anchor" href="#faker-1" aria-label="Permalink to &quot;faker&quot;">​</a></h4><p>使用 JavaFaker 库生成各种类型的模拟数据。</p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>key</code></td><td>String</td><td>无</td><td>数据类型，格式为 ClassName.MethodName（必填）</td></tr><tr><td><code>locale</code></td><td>String</td><td>zh-CN</td><td>本地化设置</td></tr></tbody></table><p><strong>常用数据类型</strong>：</p><ul><li><code>name.fullName</code>：完整姓名</li><li><code>name.firstName</code>：名字</li><li><code>name.lastName</code>：姓氏</li><li><code>internet.emailAddress</code>：邮箱地址</li><li><code>phoneNumber.cellPhone</code>：手机号码</li><li><code>address.fullAddress</code>：完整地址</li><li><code>company.name</code>：公司名称</li><li><code>lorem.sentence</code>：随机句子</li></ul><p><strong>使用示例</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 生成中文姓名</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  user_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${faker(&#39;name.fullName&#39;, &#39;zh-CN&#39;)}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 生成邮箱地址</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${faker(&#39;internet.emailAddress&#39;)}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 生成手机号码</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  phone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${faker(&#39;phoneNumber.cellPhone&#39;)}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 生成公司名称</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  company</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${faker(&#39;company.name&#39;)}</span></span></code></pre></div><p><strong>详细参考</strong>：<a href="http://dius.github.io/java-faker/apidocs/index.html" target="_blank" rel="noreferrer">JavaFaker API 文档</a></p><h2 id="💡-扩展功能" tabindex="-1">💡 扩展功能 <a class="header-anchor" href="#💡-扩展功能" aria-label="Permalink to &quot;💡 扩展功能&quot;">​</a></h2><p>当内置函数无法满足特定需求时，Ryze 框架支持自定义函数扩展。详细的开发指南请参考：</p><ul><li><strong>开发文档</strong>：<a href="/ryze/developer/function.html">函數</a> - 完整的开发指南和最佳实践</li><li><strong>代码示例</strong> ：查看框架源码中的<a href="https://github.com/XiaoMiSum/ryze/tree/master/ryze/src/main/java/io/github/xiaomisum/ryze/function" target="_blank" rel="noreferrer">内置函数实现</a></li></ul><p><strong>💡 提示</strong>：变量和函数是 Ryze 框架中实现动态测试的核心功能，合理使用可以大大提高测试的灵活性和可维护性！</p>`,118)])])}const c=a(e,[["render",l]]);export{g as __pageData,c as default};
