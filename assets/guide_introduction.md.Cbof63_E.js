import{_ as s,c as i,o as e,ae as n}from"./chunks/framework.B2RX65tY.js";const E=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"guide/introduction.md","filePath":"guide/introduction.md","lastUpdated":1756736247000}'),t={name:"guide/introduction.md"};function l(r,a,o,h,p,d){return e(),i("div",null,[...a[0]||(a[0]=[n(`<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p>Ryze 是一个基于 Java 21 开发的现代化测试框架，专为多协议测试而设计。它通过 JSON/YAML 描述测试场景，实现了测试用例与代码的完全分离，提供了统一的测试执行方式和丰富的扩展能力。</p><h2 id="核心特性" tabindex="-1">核心特性 <a class="header-anchor" href="#核心特性" aria-label="Permalink to &quot;核心特性&quot;">​</a></h2><h3 id="🎯-测试用例与代码分离" tabindex="-1">🎯 测试用例与代码分离 <a class="header-anchor" href="#🎯-测试用例与代码分离" aria-label="Permalink to &quot;🎯 测试用例与代码分离&quot;">​</a></h3><p>采用 JSON/YAML 描述测试场景，保障测试用例的统一性和可维护性。</p><h3 id="🔧-多协议支持" tabindex="-1">🔧 多协议支持 <a class="header-anchor" href="#🔧-多协议支持" aria-label="Permalink to &quot;🔧 多协议支持&quot;">​</a></h3><p>原生支持 HTTP(S)、Dubbo、JDBC、Redis、MongoDB、Kafka、RabbitMQ 等协议。</p><h3 id="⚡-丰富的测试组件" tabindex="-1">⚡ 丰富的测试组件 <a class="header-anchor" href="#⚡-丰富的测试组件" aria-label="Permalink to &quot;⚡ 丰富的测试组件&quot;">​</a></h3><p>内置前置/后置处理器、断言验证器、数据提取器等，轻松实现复杂测试场景。</p><h3 id="🎨-灵活的校验机制" tabindex="-1">🎨 灵活的校验机制 <a class="header-anchor" href="#🎨-灵活的校验机制" aria-label="Permalink to &quot;🎨 灵活的校验机制&quot;">​</a></h3><p>支持多种断言规则，包括相等性、包含性、正则匹配等验证方式。</p><h3 id="🚀-极强的可扩展性" tabindex="-1">🚀 极强的可扩展性 <a class="header-anchor" href="#🚀-极强的可扩展性" aria-label="Permalink to &quot;🚀 极强的可扩展性&quot;">​</a></h3><p>基于 SPI 机制，支持自定义协议、处理器、断言规则等组件。</p><h3 id="📊-美观的测试报告" tabindex="-1">📊 美观的测试报告 <a class="header-anchor" href="#📊-美观的测试报告" aria-label="Permalink to &quot;📊 美观的测试报告&quot;">​</a></h3><p>集成 Allure，生成详细的测试报告。</p><h2 id="系统架构" tabindex="-1">系统架构 <a class="header-anchor" href="#系统架构" aria-label="Permalink to &quot;系统架构&quot;">​</a></h2><p>Ryze 采用模块化架构设计，核心模块提供基础能力，协议模块提供扩展能力：</p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Ryze Core] --&gt; B[HTTP Module]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A --&gt; C[Dubbo Module]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A --&gt; D[JDBC Module]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A --&gt; E[Redis Module]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A --&gt; F[MongoDB Module]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A --&gt; G[Kafka Module]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A --&gt; H[RabbitMQ Module]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A --&gt; I[ActiveMQ Module]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A --&gt; J[TestNG Integration]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A --&gt; K[Example Modules]</span></span></code></pre></div><h2 id="核心组件" tabindex="-1">核心组件 <a class="header-anchor" href="#核心组件" aria-label="Permalink to &quot;核心组件&quot;">​</a></h2><ul><li><strong>测试元件 (TestElement)</strong>: 所有测试组件的基类，支持配置继承和上下文管理</li><li><strong>取样器 (Sampler)</strong>: 执行具体的测试操作，如发送 HTTP 请求、调用 Dubbo 服务</li><li><strong>处理器 (Processor)</strong>: 在测试执行前后处理数据，支持前置和后置处理</li><li><strong>断言器 (Assertion)</strong>: 验证测试结果是否符合预期</li><li><strong>提取器 (Extractor)</strong>: 从测试结果中提取数据供后续使用</li></ul>`,20)])])}const k=s(t,[["render",l]]);export{E as __pageData,k as default};
