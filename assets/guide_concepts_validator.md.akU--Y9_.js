import{_ as t,c as i,o as a,a0 as e}from"./chunks/framework.CRvEeNYG.js";const c=JSON.parse('{"title":"✅ 验证器","description":"","frontmatter":{},"headers":[],"relativePath":"guide/concepts/validator.md","filePath":"guide/concepts/validator.md","lastUpdated":1758161209000}'),l={name:"guide/concepts/validator.md"};function d(h,s,n,p,r,k){return a(),i("div",null,[...s[0]||(s[0]=[e(`<h1 id="✅-验证器" tabindex="-1">✅ 验证器 <a class="header-anchor" href="#✅-验证器" aria-label="Permalink to &quot;✅ 验证器&quot;">​</a></h1><p>验证器是 Ryze 框架中用于验证测试结果是否符合预期的关键组件，支持多种数据格式和验证规则。</p><h2 id="🔍-基本概念" tabindex="-1">🔍 基本概念 <a class="header-anchor" href="#🔍-基本概念" aria-label="Permalink to &quot;🔍 基本概念&quot;">​</a></h2><h3 id="作用原理" tabindex="-1">作用原理 <a class="header-anchor" href="#作用原理" aria-label="Permalink to &quot;作用原理&quot;">​</a></h3><p>验证器在取样器或处理器执行完成后自动运行，从响应结果中获取实际值，并与预期值进行比较，判断测试是否通过。</p><h3 id="配置位置" tabindex="-1">配置位置 <a class="header-anchor" href="#配置位置" aria-label="Permalink to &quot;配置位置&quot;">​</a></h3><p>验证器可以配置在：</p><ul><li><strong>取样器中</strong>：直接验证取样器的响应结果</li><li><strong>后置处理器中</strong>：作为后置处理的一部分</li><li><strong>测试集合中</strong>：在集合级别进行统一验证</li></ul><h3 id="验证流程" tabindex="-1">验证流程 <a class="header-anchor" href="#验证流程" aria-label="Permalink to &quot;验证流程&quot;">​</a></h3><ol><li><strong>获取实际值</strong>：从响应数据中提取指定字段的值</li><li><strong>数据转换</strong>：必要时进行数据类型转换</li><li><strong>规则匹配</strong>：根据指定的验证规则进行比较</li><li><strong>结果返回</strong>：返回验证通过或失败的结果</li></ol><h2 id="🛠️-内置验证器" tabindex="-1">🛠️ 内置验证器 <a class="header-anchor" href="#🛠️-内置验证器" aria-label="Permalink to &quot;🛠️ 内置验证器&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">json</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # json 验证器，用于验证json内容</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$.status&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # json path</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">expected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 期望值</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">==</span></span></code></pre></div><p>或</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$.status&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">expected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>testclass：定义验证器类型，可选值：json、JSONAssertion 、json_assertion</p><p>field：定义 验证值的 JSON PATH</p><p>expected：期望值，可以多个值</p><p>rule：验证规则，默认 ==</p><h3 id="http-验证器" tabindex="-1">HTTP 验证器 <a class="header-anchor" href="#http-验证器" aria-label="Permalink to &quot;HTTP 验证器&quot;">​</a></h3><p>HTTP取样器专属验证器，通常用于验证 http状态码、http response header</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http_assertion</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # http 验证器，用于验证http响应（状态码、header、响应消息内容）</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">status</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # http响应的哪个部位 status、header[0].xxx、body</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">expected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 期望值</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">==</span></span></code></pre></div><p>或</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http_assertion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">expected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>testclass：定义取样器类型，可选值：http、https、HTTPAssertion 、http_assertion</p><p>field：定义 验证值，HTTP状态码：status，响应Body：body，响应头：header[0].Content-Type</p><p>expected：期望值，可以多个值</p><p>rule：验证规则，默认 ==</p><h3 id="result-验证器" tabindex="-1">Result 验证器 <a class="header-anchor" href="#result-验证器" aria-label="Permalink to &quot;Result 验证器&quot;">​</a></h3><p>验证取样器响应结果是否符合预期</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">result_assertion</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # result 验证器类型</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">expected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 变量名称</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">==</span></span></code></pre></div><p>或</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">result_assertion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">expected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>testclass：定义取样器类型，可选值：RegexAssertion 、regex_assertion</p><p>expected：期望值，可以多个值（仅部分验证规则生效）</p><p>rule：验证规则，默认 ==</p><h2 id="验证规则-rule" tabindex="-1">验证规则 rule <a class="header-anchor" href="#验证规则-rule" aria-label="Permalink to &quot;验证规则 rule&quot;">​</a></h2><p>验证规则默认为 ==，验证 实际值是否与期望值一致，详细规则如下：</p><table tabindex="0"><thead><tr><th>规则</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>==</code></td><td>相等</td><td><code>field: status, expected: 200, rule: &quot;==&quot;</code></td></tr><tr><td><code>eq_any</code></td><td>任意一个相等</td><td><code>field: status, expected: [200, 300], rule: &quot;eq_any&quot;</code></td></tr><tr><td><code>!=</code></td><td>不相等</td><td><code>field: status, expected: 404, rule: &quot;!=&quot;</code></td></tr><tr><td><code>&gt;</code></td><td>大于</td><td><code>field: status, expected: 0, rule: &quot;&gt;&quot;</code></td></tr><tr><td><code>&lt;</code></td><td>小于</td><td><code>field: status, expected: 10000, rule: &quot;&lt;&quot;</code></td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td><td><code>field: status, expected: 0, rule: &quot;&gt;=&quot;</code></td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td><td><code>field: status, expected: 100, rule: &quot;&lt;=&quot;</code></td></tr><tr><td><code>contains</code></td><td>包含</td><td><code>field: header.Content-Type, expected: &quot;success&quot;, rule: &quot;contains&quot;</code></td></tr><tr><td><code>any_contains</code></td><td>包含任意一个</td><td><code>field: header.Content-Type, expected: [success, false], rule: &quot;any_contains&quot;</code></td></tr><tr><td><code>not_contains</code></td><td>不包含</td><td><code>field: header.Content-Type, expected: &quot;error&quot;, rule: &quot;not_contains&quot;</code></td></tr><tr><td><code>regex</code></td><td>正则匹配</td><td><code>field: header.Content-Type, expected: &quot;^\\\\d{4}-\\\\d{2}-\\\\d{2}$&quot;, rule: &quot;regex&quot;</code></td></tr><tr><td><code>is_not_empty</code></td><td>非空</td><td><code>field: header.Content-Type, rule: &quot;is_not_empty&quot;</code></td></tr><tr><td><code>is_empty</code></td><td>为空</td><td><code>field: header.Content-Type, rule: &quot;is_empty&quot;</code></td></tr><tr><td><code>same_object</code></td><td>对象匹配</td><td><code>field: body, expected: {}, rule: &quot;same_object&quot;</code></td></tr></tbody></table><h2 id="💡-扩展功能" tabindex="-1">💡 扩展功能 <a class="header-anchor" href="#💡-扩展功能" aria-label="Permalink to &quot;💡 扩展功能&quot;">​</a></h2><p>当内置验证器无法满足特定需求时，Ryze 框架支持自定义验证器和验证规则扩展。详细的开发指南请参考：</p><ul><li><strong>开发文档</strong>：<a href="/developer/validator.html">开发者文档</a> - 完整的开发指南和最佳实践</li><li><strong>代码示例</strong> ：查看框架源码中的<a href="https://github.com/XiaoMiSum/ryze/tree/master/ryze/src/main/resources/META-INF/services/io.github.xiaomisum.ryze.assertion.Assertion" target="_blank" rel="noreferrer">内置验证器实现</a></li></ul><p><strong>💡 提示</strong>：验证器是确保测试质量的关键组件，合理使用各种验证规则可以构建强健的测试体系！</p>`,42)])])}const E=t(l,[["render",d]]);export{c as __pageData,E as default};
