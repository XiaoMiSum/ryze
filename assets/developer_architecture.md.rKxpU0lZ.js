import{_ as r,C as E,c as d,o as n,a0 as k,b as t,j as h,w as i,a,G as e,a1 as p}from"./chunks/framework.Cl3KOctt.js";const b=JSON.parse('{"title":"🏗️ Ryze 架构设计文档","description":"","frontmatter":{},"headers":[],"relativePath":"developer/architecture.md","filePath":"developer/architecture.md","lastUpdated":1756736247000}'),g={name:"developer/architecture.md"};function o(y,s,c,A,F,u){const l=E("Mermaid");return n(),d("div",null,[s[4]||(s[4]=k('<h1 id="🏗️-ryze-架构设计文档" tabindex="-1">🏗️ Ryze 架构设计文档 <a class="header-anchor" href="#🏗️-ryze-架构设计文档" aria-label="Permalink to &quot;🏗️ Ryze 架构设计文档&quot;">​</a></h1><h2 id="📖-概述" tabindex="-1">📖 概述 <a class="header-anchor" href="#📖-概述" aria-label="Permalink to &quot;📖 概述&quot;">​</a></h2><p>Ryze 是一个基于 Java 21 的现代化多协议测试框架，采用模块化架构设计，通过 SPI (Service Provider Interface) 机制实现了高度的可扩展性。本文档详细描述了框架的整体架构、核心组件、设计模式以及扩展机制。</p><h2 id="🎯-设计目标" tabindex="-1">🎯 设计目标 <a class="header-anchor" href="#🎯-设计目标" aria-label="Permalink to &quot;🎯 设计目标&quot;">​</a></h2><h3 id="核心设计原则" tabindex="-1">核心设计原则 <a class="header-anchor" href="#核心设计原则" aria-label="Permalink to &quot;核心设计原则&quot;">​</a></h3><ol><li><strong>模块化</strong>: 各协议模块独立，便于维护和扩展</li><li><strong>可扩展性</strong>: 基于 SPI 机制，支持自定义组件</li><li><strong>代码与配置分离</strong>: 测试逻辑与数据分离，提升可维护性</li><li><strong>统一接口</strong>: 所有协议共享相同的测试组件接口</li><li><strong>高性能</strong>: 优化的执行引擎和资源管理</li></ol><h3 id="技术选型考虑" tabindex="-1">技术选型考虑 <a class="header-anchor" href="#技术选型考虑" aria-label="Permalink to &quot;技术选型考虑&quot;">​</a></h3><ul><li><strong>Java 21</strong>: 利用最新 JVM 特性和性能优化</li><li><strong>FastJSON2</strong>: 高性能 JSON 处理</li><li><strong>FreeMarker</strong>: 强大的模板引擎支持</li><li><strong>SPI 机制</strong>: 标准化的扩展接口</li><li><strong>无依赖冲突</strong>: 精心选择的依赖库版本</li></ul><h2 id="🏗️-整体架构" tabindex="-1">🏗️ 整体架构 <a class="header-anchor" href="#🏗️-整体架构" aria-label="Permalink to &quot;🏗️ 整体架构&quot;">​</a></h2><h3 id="架构层次图" tabindex="-1">架构层次图 <a class="header-anchor" href="#架构层次图" aria-label="Permalink to &quot;架构层次图&quot;">​</a></h3>',10)),(n(),t(p,null,{default:i(()=>[e(l,{id:"mermaid-78",class:"mermaid",graph:"graph%20TB%0A%20%20%20%20subgraph%20%22%E7%94%A8%E6%88%B7%E5%B1%82%20User%20Layer%22%0A%20%20%20%20%20%20%20%20A%5BJSON%2FYAML%20%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%5D%0A%20%20%20%20%20%20%20%20B%5BMagicBox%20API%5D%0A%20%20%20%20%20%20%20%20C%5BGroovy%20DSL%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22%E6%A1%86%E6%9E%B6%E5%B1%82%20Framework%20Layer%22%0A%20%20%20%20%20%20%20%20D%5BRyze%20Core%5D%0A%20%20%20%20%20%20%20%20E%5BJsonTree%20%E8%A7%A3%E6%9E%90%E5%99%A8%5D%0A%20%20%20%20%20%20%20%20F%5BSessionRunner%20%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22%E7%BB%84%E4%BB%B6%E5%B1%82%20Component%20Layer%22%0A%20%20%20%20%20%20%20%20G%5BTestElement%20%E6%B5%8B%E8%AF%95%E5%85%83%E4%BB%B6%5D%0A%20%20%20%20%20%20%20%20H%5BSampler%20%E5%8F%96%E6%A0%B7%E5%99%A8%5D%0A%20%20%20%20%20%20%20%20I%5BProcessor%20%E5%A4%84%E7%90%86%E5%99%A8%5D%0A%20%20%20%20%20%20%20%20J%5BAssertion%20%E6%96%AD%E8%A8%80%E5%99%A8%5D%0A%20%20%20%20%20%20%20%20K%5BExtractor%20%E6%8F%90%E5%8F%96%E5%99%A8%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22%E5%8D%8F%E8%AE%AE%E5%B1%82%20Protocol%20Layer%22%0A%20%20%20%20%20%20%20%20L%5BHTTP%20Module%5D%0A%20%20%20%20%20%20%20%20M%5BDubbo%20Module%5D%0A%20%20%20%20%20%20%20%20N%5BJDBC%20Module%5D%0A%20%20%20%20%20%20%20%20O%5BRedis%20Module%5D%0A%20%20%20%20%20%20%20%20P%5BMongoDB%20Module%5D%0A%20%20%20%20%20%20%20%20Q%5BKafka%20Module%5D%0A%20%20%20%20%20%20%20%20R%5BRabbitMQ%20Module%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22%E6%89%A9%E5%B1%95%E5%B1%82%20Extension%20Layer%22%0A%20%20%20%20%20%20%20%20S%5BSPI%20%E6%9C%BA%E5%88%B6%5D%0A%20%20%20%20%20%20%20%20T%5B%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%5D%0A%20%20%20%20%20%20%20%20U%5B%E6%8A%A5%E5%91%8A%E9%9B%86%E6%88%90%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20A%20--%3E%20D%0A%20%20%20%20B%20--%3E%20D%0A%20%20%20%20C%20--%3E%20D%0A%20%20%20%20D%20--%3E%20E%0A%20%20%20%20D%20--%3E%20F%0A%20%20%20%20F%20--%3E%20G%0A%20%20%20%20G%20--%3E%20H%0A%20%20%20%20G%20--%3E%20I%0A%20%20%20%20G%20--%3E%20J%0A%20%20%20%20G%20--%3E%20K%0A%20%20%20%20H%20--%3E%20L%0A%20%20%20%20H%20--%3E%20M%0A%20%20%20%20H%20--%3E%20N%0A%20%20%20%20H%20--%3E%20O%0A%20%20%20%20H%20--%3E%20P%0A%20%20%20%20H%20--%3E%20Q%0A%20%20%20%20H%20--%3E%20R%0A%20%20%20%20S%20--%3E%20T%0A%20%20%20%20S%20--%3E%20U%0A"})]),fallback:i(()=>[...s[0]||(s[0]=[a(" Loading... ",-1)])]),_:1})),s[5]||(s[5]=h("h3",{id:"模块依赖关系",tabindex:"-1"},[a("模块依赖关系 "),h("a",{class:"header-anchor",href:"#模块依赖关系","aria-label":'Permalink to "模块依赖关系"'},"​")],-1)),(n(),t(p,null,{default:i(()=>[e(l,{id:"mermaid-82",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20subgraph%20%22Core%20Modules%22%0A%20%20%20%20%20%20%20%20A%5Bryze%5D%20--%3E%20B%5Bryze-testng%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22Protocol%20Modules%22%0A%20%20%20%20%20%20%20%20A%20--%3E%20C%5Bryze-dubbo%5D%0A%20%20%20%20%20%20%20%20A%20--%3E%20D%5Bryze-kafka%5D%0A%20%20%20%20%20%20%20%20A%20--%3E%20E%5Bryze-mongo%5D%0A%20%20%20%20%20%20%20%20A%20--%3E%20F%5Bryze-rabbit%5D%0A%20%20%20%20%20%20%20%20A%20--%3E%20G%5Bryze-active%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22Example%20Modules%22%0A%20%20%20%20%20%20%20%20C%20--%3E%20H%5Bdubbo-example%5D%0A%20%20%20%20%20%20%20%20A%20--%3E%20I%5Bhttp-example%5D%0A%20%20%20%20%20%20%20%20A%20--%3E%20J%5Bjdbc-example%5D%0A%20%20%20%20%20%20%20%20D%20--%3E%20K%5Bkafka-example%5D%0A%20%20%20%20%20%20%20%20E%20--%3E%20L%5Bmongo-example%5D%0A%20%20%20%20%20%20%20%20F%20--%3E%20M%5Brabbit-example%5D%0A%20%20%20%20%20%20%20%20G%20--%3E%20N%5Bactive-example%5D%0A%20%20%20%20end%0A"})]),fallback:i(()=>[...s[1]||(s[1]=[a(" Loading... ",-1)])]),_:1})),s[6]||(s[6]=k(`<h2 id="🔧-核心组件" tabindex="-1">🔧 核心组件 <a class="header-anchor" href="#🔧-核心组件" aria-label="Permalink to &quot;🔧 核心组件&quot;">​</a></h2><h3 id="_1-applicationconfig-配置管理器" tabindex="-1">1. ApplicationConfig - 配置管理器 <a class="header-anchor" href="#_1-applicationconfig-配置管理器" aria-label="Permalink to &quot;1. ApplicationConfig - 配置管理器&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ApplicationConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 通过 SPI 机制动态加载各种组件映射</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Class&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TestElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; TEST_ELEMENT_KEY_MAP;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Class&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Assertion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; ASSERTION_KEY_MAP;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... 其他组件映射</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>职责</strong>:</p><ul><li>管理所有测试组件的类型映射</li><li>通过 SPI 机制动态加载扩展组件</li><li>提供线程安全的组件访问</li><li>实现懒加载和缓存机制</li></ul><p><strong>设计模式</strong>: 单例模式 + 延迟加载</p><h3 id="_2-sessionrunner-执行引擎" tabindex="-1">2. SessionRunner - 执行引擎 <a class="header-anchor" href="#_2-sessionrunner-执行引擎" aria-label="Permalink to &quot;2. SessionRunner - 执行引擎&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SessionRunner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SessionContext sessionContext;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Configure configure;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; contextChain;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContextWrapper context;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>职责</strong>:</p><ul><li>管理测试执行的生命周期</li><li>维护测试上下文链</li><li>协调各组件的执行</li><li>提供变量存储和共享机制</li></ul><p><strong>设计模式</strong>: 命令模式 + 责任链模式</p><h3 id="_3-jsontree-配置解析器" tabindex="-1">3. JsonTree - 配置解析器 <a class="header-anchor" href="#_3-jsontree-配置解析器" aria-label="Permalink to &quot;3. JsonTree - 配置解析器&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonTree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JSONObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 将原始 JSON 转换为标准化的测试配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JSONObject </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">testcase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        replaceExpiredKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(testcase);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prepare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(testcase);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(json, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isRyzeTestFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(json));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>职责</strong>:</p><ul><li>解析和标准化 JSON/YAML 测试配置</li><li>处理键名大小写转换</li><li>支持配置继承和合并</li><li>递归处理嵌套结构</li></ul><p><strong>设计模式</strong>: 建造者模式 + 递归模式</p><h3 id="_4-testelement-测试元件基类" tabindex="-1">4. TestElement - 测试元件基类 <a class="header-anchor" href="#_4-testelement-测试元件基类" aria-label="Permalink to &quot;4. TestElement - 测试元件基类&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Validatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cloneable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;TestElement&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SessionRunner </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TestElement&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>设计特点</strong>:</p><ul><li>所有测试组件的基础接口</li><li>支持配置验证和对象克隆</li><li>非线程安全，需要复制后使用</li><li>支持配置继承和上下文传递</li></ul><h2 id="🎨-设计模式应用" tabindex="-1">🎨 设计模式应用 <a class="header-anchor" href="#🎨-设计模式应用" aria-label="Permalink to &quot;🎨 设计模式应用&quot;">​</a></h2><h3 id="_1-策略模式-strategy-pattern" tabindex="-1">1. 策略模式 (Strategy Pattern) <a class="header-anchor" href="#_1-策略模式-strategy-pattern" aria-label="Permalink to &quot;1. 策略模式 (Strategy Pattern)&quot;">​</a></h3><p><strong>应用场景</strong>: 不同协议的 Sampler、Processor 实现</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 统一接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sampler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 具体策略实现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">KW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTTPSampler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sampler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DefaultSampleResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">KW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dubbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DubboSampler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sampler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DefaultSampleResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>优势</strong>:</p><ul><li>运行时动态选择协议实现</li><li>新增协议无需修改核心代码</li><li>每个协议独立维护和测试</li></ul><h3 id="_2-建造者模式-builder-pattern" tabindex="-1">2. 建造者模式 (Builder Pattern) <a class="header-anchor" href="#_2-建造者模式-builder-pattern" aria-label="Permalink to &quot;2. 建造者模式 (Builder Pattern)&quot;">​</a></h3><p><strong>应用场景</strong>: 测试组件的构建和配置</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTTPSampler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Builder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbstractSampler.Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;...&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Builder </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Builder </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Builder </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HTTPSampler </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { ... }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>优势</strong>:</p><ul><li>支持链式调用，API 友好</li><li>参数验证和默认值设置</li><li>复杂对象的分步构建</li></ul><h3 id="_3-模板方法模式-template-method-pattern" tabindex="-1">3. 模板方法模式 (Template Method Pattern) <a class="header-anchor" href="#_3-模板方法模式-template-method-pattern" aria-label="Permalink to &quot;3. 模板方法模式 (Template Method Pattern)&quot;">​</a></h3><p><strong>应用场景</strong>: 测试组件的执行流程</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbstractSampler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CONFIG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RESULT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RESULT </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SessionRunner </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 1. 准备阶段</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        handleRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 2. 执行阶段</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 3. 处理阶段</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        handleResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 4. 后处理阶段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContextWrapper </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, RESULT </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>优势</strong>:</p><ul><li>统一的执行流程和生命周期</li><li>子类只需实现特定步骤</li><li>便于添加通用功能和拦截器</li></ul><h3 id="_4-工厂模式-factory-pattern" tabindex="-1">4. 工厂模式 (Factory Pattern) <a class="header-anchor" href="#_4-工厂模式-factory-pattern" aria-label="Permalink to &quot;4. 工厂模式 (Factory Pattern)&quot;">​</a></h3><p><strong>应用场景</strong>: 根据配置创建测试组件</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TestElement </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, JSONObject </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Class&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; clazz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ApplicationConfig.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTestElementKeyMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (TestElement) JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clazz, config);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>优势</strong>:</p><ul><li>隐藏对象创建复杂性</li><li>支持基于配置的动态创建</li><li>便于扩展新的组件类型</li></ul><h3 id="_5-责任链模式-chain-of-responsibility-pattern" tabindex="-1">5. 责任链模式 (Chain of Responsibility Pattern) <a class="header-anchor" href="#_5-责任链模式-chain-of-responsibility-pattern" aria-label="Permalink to &quot;5. 责任链模式 (Chain of Responsibility Pattern)&quot;">​</a></h3><p><strong>应用场景</strong>: 上下文管理和变量解析</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContextWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; contextChain;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Context context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contextChain) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Object value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>优势</strong>:</p><ul><li>支持多层级的变量继承</li><li>灵活的上下文管理</li><li>便于扩展新的上下文类型</li></ul><h3 id="_6-观察者模式-observer-pattern" tabindex="-1">6. 观察者模式 (Observer Pattern) <a class="header-anchor" href="#_6-观察者模式-observer-pattern" aria-label="Permalink to &quot;6. 观察者模式 (Observer Pattern)&quot;">​</a></h3><p><strong>应用场景</strong>: 测试报告和事件监听</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReporterListener</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RyzeInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> beforeTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TestElement </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> afterTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TestElement </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Result </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Allure 集成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AllureReportListener</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReporterListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 监听测试事件，生成 Allure 报告</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>优势</strong>:</p><ul><li>松耦合的事件通知机制</li><li>支持多种报告格式</li><li>便于集成第三方工具</li></ul><h2 id="🔌-扩展机制" tabindex="-1">🔌 扩展机制 <a class="header-anchor" href="#🔌-扩展机制" aria-label="Permalink to &quot;🔌 扩展机制&quot;">​</a></h2><h3 id="spi-服务发现" tabindex="-1">SPI 服务发现 <a class="header-anchor" href="#spi-服务发现" aria-label="Permalink to &quot;SPI 服务发现&quot;">​</a></h3><p>Ryze 使用 Java SPI 机制实现组件的自动发现和注册：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>META-INF/services/</span></span>
<span class="line"><span>├── io.github.xiaomisum.ryze.testelement.TestElement</span></span>
<span class="line"><span>├── io.github.xiaomisum.ryze.assertion.Rule</span></span>
<span class="line"><span>├── io.github.xiaomisum.ryze.extractor.Extractor</span></span>
<span class="line"><span>└── io.github.xiaomisum.ryze.testelement.processor.Preprocessor</span></span></code></pre></div><h3 id="自定义组件开发" tabindex="-1">自定义组件开发 <a class="header-anchor" href="#自定义组件开发" aria-label="Permalink to &quot;自定义组件开发&quot;">​</a></h3><ol><li><strong>实现相应接口</strong>:</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">KW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom_sampler&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomSampler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sampler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DefaultSampleResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefaultSampleResult </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SessionRunner </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 自定义实现逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li><strong>注册 SPI 服务</strong>:</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#META</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">INF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">services</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io.github.xiaomisum.ryze.testelement.TestElement</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">com.example.CustomSampler</span></span></code></pre></div><ol start="3"><li><strong>在测试配置中使用</strong>:</li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;testclass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom_sampler&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;customParam&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="协议模块开发指南" tabindex="-1">协议模块开发指南 <a class="header-anchor" href="#协议模块开发指南" aria-label="Permalink to &quot;协议模块开发指南&quot;">​</a></h3><p>开发新的协议模块需要实现以下组件：</p><ol><li><strong>Sampler 取样器</strong></li><li><strong>Preprocessor 前置处理器</strong></li><li><strong>Postprocessor 后置处理器</strong></li><li><strong>ConfigureItem 配置项</strong></li><li><strong>Builder 构建器集合</strong></li></ol><p>参考现有协议模块的实现结构。</p><h2 id="🏃-执行流程" tabindex="-1">🏃 执行流程 <a class="header-anchor" href="#🏃-执行流程" aria-label="Permalink to &quot;🏃 执行流程&quot;">​</a></h2><h3 id="测试执行生命周期" tabindex="-1">测试执行生命周期 <a class="header-anchor" href="#测试执行生命周期" aria-label="Permalink to &quot;测试执行生命周期&quot;">​</a></h3>`,68)),(n(),t(p,null,{default:i(()=>[e(l,{id:"mermaid-455",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20participant%20U%20as%20User%0A%20%20%20%20participant%20R%20as%20Ryze%0A%20%20%20%20participant%20J%20as%20JsonTree%0A%20%20%20%20participant%20S%20as%20SessionRunner%0A%20%20%20%20participant%20T%20as%20TestElement%0A%20%20%20%20%0A%20%20%20%20U-%3E%3ER%3A%20start(testcase)%0A%20%20%20%20R-%3E%3EJ%3A%20new%20JsonTree(config)%0A%20%20%20%20J-%3E%3EJ%3A%20parse%20and%20normalize%0A%20%20%20%20R-%3E%3ES%3A%20newSession(configure)%0A%20%20%20%20S-%3E%3ES%3A%20initContextChain()%0A%20%20%20%20R-%3E%3ET%3A%20run(session)%0A%20%20%20%20T-%3E%3ET%3A%20handleRequest()%0A%20%20%20%20T-%3E%3ET%3A%20sample()%0A%20%20%20%20T-%3E%3ET%3A%20handleResponse()%0A%20%20%20%20T-%3E%3ET%3A%20processAssertions()%0A%20%20%20%20T-%3E%3ET%3A%20processExtractors()%0A%20%20%20%20T--%3E%3ER%3A%20Result%0A%20%20%20%20R--%3E%3EU%3A%20TestResult%0A"})]),fallback:i(()=>[...s[2]||(s[2]=[a(" Loading... ",-1)])]),_:1})),s[7]||(s[7]=h("h3",{id:"变量解析流程",tabindex:"-1"},[a("变量解析流程 "),h("a",{class:"header-anchor",href:"#变量解析流程","aria-label":'Permalink to "变量解析流程"'},"​")],-1)),(n(),t(p,null,{default:i(()=>[e(l,{id:"mermaid-459",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5B%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%20%22%24%7BvarName%7D%22%5D%20--%3E%20B%5BFreeMarker%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%5D%0A%20%20%20%20B%20--%3E%20C%5B%E4%B8%8A%E4%B8%8B%E6%96%87%E9%93%BE%E6%9F%A5%E6%89%BE%E5%8F%98%E9%87%8F%5D%0A%20%20%20%20C%20--%3E%20D%7B%E5%8F%98%E9%87%8F%E5%AD%98%E5%9C%A8%3F%7D%0A%20%20%20%20D%20--%3E%7C%E6%98%AF%7C%20E%5B%E6%9B%BF%E6%8D%A2%E5%8F%98%E9%87%8F%E5%80%BC%5D%0A%20%20%20%20D%20--%3E%7C%E5%90%A6%7C%20F%5B%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%3F%5D%0A%20%20%20%20F%20--%3E%7C%E6%98%AF%7C%20G%5B%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%5D%0A%20%20%20%20F%20--%3E%7C%E5%90%A6%7C%20H%5B%E4%BF%9D%E6%8C%81%E5%8E%9F%E6%A0%B7%5D%0A%20%20%20%20E%20--%3E%20I%5B%E8%BF%94%E5%9B%9E%E5%A4%84%E7%90%86%E5%90%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%5D%0A%20%20%20%20G%20--%3E%20I%0A%20%20%20%20H%20--%3E%20I%0A"})]),fallback:i(()=>[...s[3]||(s[3]=[a(" Loading... ",-1)])]),_:1})),s[8]||(s[8]=k(`<h2 id="📊-性能优化" tabindex="-1">📊 性能优化 <a class="header-anchor" href="#📊-性能优化" aria-label="Permalink to &quot;📊 性能优化&quot;">​</a></h2><h3 id="_1-组件缓存" tabindex="-1">1. 组件缓存 <a class="header-anchor" href="#_1-组件缓存" aria-label="Permalink to &quot;1. 组件缓存&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ApplicationConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 ReadWriteLock 保证线程安全的缓存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReadWriteLock CACHE_LOCK </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReentrantReadWriteLock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Class&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; COMPONENT_CACHE;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-对象复用" tabindex="-1">2. 对象复用 <a class="header-anchor" href="#_2-对象复用" aria-label="Permalink to &quot;2. 对象复用&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cloneable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    T </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基于 Kryo 的高效对象复制</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-懒加载" tabindex="-1">3. 懒加载 <a class="header-anchor" href="#_3-懒加载" aria-label="Permalink to &quot;3. 懒加载&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDataMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ReadWriteLock lock, Supplier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getter, Supplier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loader) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 双重检查锁定模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-内存管理" tabindex="-1">4. 内存管理 <a class="header-anchor" href="#_4-内存管理" aria-label="Permalink to &quot;4. 内存管理&quot;">​</a></h3><ul><li>使用 ThreadLocal 管理会话状态</li><li>及时清理测试上下文</li><li>合理的对象生命周期管理</li></ul><h2 id="🔒-线程安全" tabindex="-1">🔒 线程安全 <a class="header-anchor" href="#🔒-线程安全" aria-label="Permalink to &quot;🔒 线程安全&quot;">​</a></h2><h3 id="设计原则" tabindex="-1">设计原则 <a class="header-anchor" href="#设计原则" aria-label="Permalink to &quot;设计原则&quot;">​</a></h3><ol><li><strong>会话隔离</strong>: 每个线程使用独立的 SessionRunner</li><li><strong>无状态组件</strong>: 核心组件不保存可变状态</li><li><strong>对象复制</strong>: TestElement 需要复制后使用</li><li><strong>读写锁</strong>: 保护共享缓存的访问</li></ol><h3 id="并发支持" tabindex="-1">并发支持 <a class="header-anchor" href="#并发支持" aria-label="Permalink to &quot;并发支持&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SessionRunner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ThreadLocal&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SessionRunner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; HOLDER </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ThreadLocal&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SessionRunner </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSessionIfNoneCreateNew</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HOLDER.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (session </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            session </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SessionRunner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Configure.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultConfigure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            HOLDER.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(session);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="🚀-未来架构演进" tabindex="-1">🚀 未来架构演进 <a class="header-anchor" href="#🚀-未来架构演进" aria-label="Permalink to &quot;🚀 未来架构演进&quot;">​</a></h2><h3 id="计划中的改进" tabindex="-1">计划中的改进 <a class="header-anchor" href="#计划中的改进" aria-label="Permalink to &quot;计划中的改进&quot;">​</a></h3><ol><li><strong>反应式编程支持</strong>: 集成 Reactor 或 RxJava</li><li><strong>云原生支持</strong>: Kubernetes 部署和扩展</li><li><strong>分布式测试</strong>: 支持集群模式测试执行</li><li><strong>流处理协议</strong>: 支持 WebSocket、GRPC Stream</li><li><strong>AI 辅助测试</strong>: 智能测试生成和分析</li></ol><h3 id="架构演进原则" tabindex="-1">架构演进原则 <a class="header-anchor" href="#架构演进原则" aria-label="Permalink to &quot;架构演进原则&quot;">​</a></h3><ul><li>保持向后兼容性</li><li>渐进式改进，避免大爆炸式重构</li><li>社区驱动的功能开发</li><li>性能和稳定性优先</li></ul><hr><p>本架构文档将随着框架的发展而持续更新。如有建议或问题，欢迎在 <a href="https://github.com/XiaoMiSum/ryze/issues" target="_blank" rel="noreferrer">Issues</a> 中讨论。</p>`,21))])}const B=r(g,[["render",o]]);export{b as __pageData,B as default};
